##################################
# AzerothCore 数据库导入配置文件 #
##################################

###################################################################################################
# SECTION INDEX
#
#    EXAMPLE CONFIG
#    DB IMPORT CONFIG
#    MYSQL SETTINGS
#    UPDATE SETTINGS
#    LOGGING SYSTEM SETTINGS
#
###################################################################################################

###################################################################################################
# EXAMPLE CONFIG示例配置
#
#    Variable
#        Description: 简要说明变量在做什么。
#        Important:   有关此变量的重要内容的注释。
#        Example:     "示例，即如果值是字符串"
#        Default:     10 - (Enabled|Comment|Variable name in case of grouped config options)
#                     0  - (Disabled|Comment|Variable name in case of grouped config options)
#
# 开发者注意事项：
# - 复制此示例以保留格式。
# - Line breaks should be at column 100.
###################################################################################################

###################################################################################################
# DB IMPORT CONFIG-数据库导入配置
#
#    LogsDir
#        Description: 日志目录设置。
#        Important:   LogsDir 需要被引用，因为字符串可能包含空格字符。
#                     日志目录必须存在，否则日志文件创建将被禁用。
#        Example:     "/home/youruser/azerothcore/logs"
#        Default:     "" - (日志文件将存储在当前路径)

LogsDir = "/home/server/log"

#
#    SourceDirectory
#        Description: AzerothCore 源目录的路径。
#                     如果路径为空，则使用内置的 CMAKE_SOURCE_DIR。
#        Example:     "../AzerothCore"
#        Default:     ""
#

SourceDirectory = "/home/azerothcore-wotlk"

#
#    MySQLExecutable
#        Description: MySQL CLI 二进制文件的路径。
#                     如果路径为空，则使用来自 cmake 的内置路径。
#        Example:     "C:/Program Files/MariaDB 10.9/bin/mysql.exe"
#                     "mysql.exe"
#                     "/usr/bin/mysql"
#        Default:     ""
#

MySQLExecutable = ""

#
#    TempDir
#        Description: 临时目录设置。
#        Important:   TempDir 需要被引用，因为字符串可能包含空角色。
#                     TempDir 目录必须存在，否则服务器无法正常工作
#        Example:     "/home/youruser/azerothcore/temp"
#        Default:     "" - (Temp files will be stored in the current path)

TempDir = "/home/server/temp"

###################################################################################################

###################################################################################################
# MYSQL SETTINGS-MYSQL 设置
#
#    LoginDatabaseInfo
#    WorldDatabaseInfo
#    CharacterDatabaseInfo
#        Description: world服务器的数据库连接设置。
#        Example:     "hostname;port;username;password;database"
#                     ".;somenumber;username;password;database" - (Use named pipes on Windows
#                                                                 "enable-named-pipe" to [mysqld]
#                                                                 section my.ini)
#                     ".;/path/to/unix_socket;username;password;database;ssl" - (use Unix sockets on
#                                                                           Unix/Linux)
#        Default:     "127.0.0.1;3306;acore;acore;acore_auth"       - (LoginDatabaseInfo)
#                     "127.0.0.1;3306;acore;acore;acore_world"      - (WorldDatabaseInfo)
#                     "127.0.0.1;3306;acore;acore;acore_characters" - (CharacterDatabaseInfo)
#
#    SSL 选项将在连接到指定数据库时启用 TLS。 如果未提供或
#    设置了“ssl”以外的任何值，将不使用 TLS。
#

LoginDatabaseInfo     = "172.16.0.9;3306;root;A111111a!;auth"
WorldDatabaseInfo     = "172.16.0.9;3306;root;A111111a!;world"
CharacterDatabaseInfo = "172.16.0.9;3306;root;A111111a!;characters"

#
#    Database.Reconnect.Seconds
#    Database.Reconnect.Attempts
#
#        Description: 每次重新连接尝试之间的秒数
#                     以及总共将执行多少次尝试
#        Default:     每 15 秒尝试 20 次
#

Database.Reconnect.Seconds = 5
Database.Reconnect.Attempts = 5

#
#    LoginDatabase.WorkerThreads
#    WorldDatabase.WorkerThreads
#    CharacterDatabase.WorkerThreads
#        Description: 为处理异步（延迟）MySQL 语句而产生的工作线程的数量。
#                     每个工作线程都通过自己与 MySQL 服务器的连接和
#                     MySQL 服务器上的自己的线程进行镜像。
#        Default:     1 - (LoginDatabase.WorkerThreads)
#                     1 - (WorldDatabase.WorkerThreads)
#                     1 - (CharacterDatabase.WorkerThreads)
#

LoginDatabase.WorkerThreads     = 1
WorldDatabase.WorkerThreads     = 1
CharacterDatabase.WorkerThreads = 1

#
#    LoginDatabase.SynchThreads
#    WorldDatabase.SynchThreads
#    CharacterDatabase.SynchThreads
#        Description: 产生要处理的 MySQL 连接的数量。
#        Default:     1 - (LoginDatabase.WorkerThreads)
#                     1 - (WorldDatabase.WorkerThreads)
#                     1 - (CharacterDatabase.WorkerThreads)
#

LoginDatabase.SynchThreads     = 1
WorldDatabase.SynchThreads     = 1
CharacterDatabase.SynchThreads = 1
###################################################################################################

###################################################################################################
# UPDATE SETTINGS
#
#    Updates.EnableDatabases
#        Description: 描述应更新哪些数据库的掩码。
#
#        Following flags are available
#           DATABASE_LOGIN     = 1, // Auth database
#           DATABASE_CHARACTER = 2, // Character database
#           DATABASE_WORLD     = 4, // World database
#
#        Default:     7  - (全部启用)
#                     4  - (仅启用World)
#                     0  - (全部禁用)

Updates.EnableDatabases = 7

#
#    Updates.AutoSetup
#        Description: 自动填充空数据库。
#        Default:     1 - (Enabled)
#                     0 - (Disabled)

Updates.AutoSetup = 1

#
#    Updates.Redundancy
#        Description: 通过散列执行数据冗余检查
#                     以检测 sql 更新的更改并重新应用它。
#        Default:     1 - (Enabled)
#                     0 - (Disabled)

Updates.Redundancy = 1

#
#    Updates.ArchivedRedundancy
#        Description: 检查存档更新的哈希（减慢启动速度）。
#        Default:     0 - (Disabled)
#                     1 - (Enabled)

Updates.ArchivedRedundancy = 0

#
#    Updates.AllowRehash
#        Description: 如果为空，则在数据库中插入当前文件哈希。
#                     如果您想将文件标记为已应用但您不知道其哈希值，这很有用。
#        Default:     1 - (Enabled)
#                     0 - (Disabled)

Updates.AllowRehash = 1

#
#    Updates.CleanDeadRefMaxCount
#        Description: 清除在一个步骤中删除或重命名和编辑更新时出现的死/孤立引用。
#                     仅当丢失更新的计数低于或等于 Updates.CleanDeadRefMaxCount 值时才开始清理。
#                     这种方式可以防止由于错误的源目录状态（可能是错误的分支或错误的修订）而擦除更新历史记录。
#                     如果您想知道数据库是否处于可能的“脏状态”，请禁用此选项。
#        Default:     3 - (Enabled)
#                     0 - (Disabled)
#                    -1 - (Enabled - unlimited)

Updates.CleanDeadRefMaxCount = 3
###################################################################################################

###################################################################################################
#
#  LOGGING SYSTEM SETTINGS-记录系统设置
#
#  Appender config values: 给定一个附加程序“名称”
#    Appender.name
#        Description: 定义“记录位置”
#        Format:      Type,LogLevel,Flags,optional1,optional2,optional3
#
#                     Type
#                         0 - (无)
#                         1 - (控制台)
#                         2 - (文件)
#                         3 - (DB)
#
#                     LogLevel
#                         0 - (已禁用)
#                         1 - (致命的)
#                         2 - (错误)
#                         3 - (警告)
#                         4 - (信息)
#                         5 - (Debug)
#                         6 - (追踪)
#
#                     Flags:
#                         0 - 无
#                         1 - 为文本添加时间戳
#                         2 - 为文本添加日志级别前缀
#                         4 - 为文本添加前缀日志过滤器类型
#                         8 - 将时间戳附加到日志文件名。 格式：YYYY-MM-DD_HH-MM-SS（仅与 Type = 2 一起使用）
#                        16 - 在覆盖之前备份现有文件（仅与 Mode = w 一起使用）
#
#                     Colors （如果Type = 控制台，则读取为optional 1）
#                         Format: "fatal error warn info debug trace"
#                         0 - BLACK
#                         1 - RED
#                         2 - GREEN
#                         3 - BROWN
#                         4 - BLUE
#                         5 - MAGENTA
#                         6 - CYAN
#                         7 - GREY
#                         8 - YELLOW
#                         9 - LRED
#                        10 - LGREEN
#                        11 - LBLUE
#                        12 - LMAGENTA
#                        13 - LCYAN
#                        14 - WHITE
#                         Example: "1 9 3 6 5 8"
#
#                     File: 文件的名称（如果类型 = 文件，则读取为可选 1）
#                         允许使用一个“%s”创建动态文件
#
#                     Mode: 打开文件的模式（如果 Type = File，则读取为optional 2）
#                          a - (附加)
#                          w - (覆盖)
#
#                     MaxFileSize: 创建新日志文件之前日志文件的最大文件大小
#                     (read as optional3 if Type = File)
#                         大小以字节为单位，以 64 位无符号整数表示。
#                         最大值为 4294967295 (4 GB)。 留空表示没有限制。
#                         NOTE: 不适用于动态文件名。
#                         Example:  536870912 (512 MB)
#

Appender.Console=1,5,0,"1 9 3 6 5 8"
Appender.DBImport=2,5,0,DBImport.log,w

#  Logger config values: 给定一个记录器“名称”
#    Logger.name
#        Description: 定义“记录什么”
#        Format:      LogLevel,AppenderList
#
#                     LogLevel
#                         0 - (Disabled)
#                         1 - (Fatal)
#                         2 - (Error)
#                         3 - (Warning)
#                         4 - (Info)
#                         5 - (Debug)
#                         6 - (Trace)
#
#                     AppenderList: 链接到记录器的附加程序列表
#                     (使用空格作为分隔符).
#

Logger.root=4,Console DBImport
###################################################################################################
